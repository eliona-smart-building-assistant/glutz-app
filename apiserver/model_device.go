/*
 * Glutz App API
 *
 * API to access and configure the Glutz
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package apiserver

// Device - The schema `Device` maps each pair of Eliona project id and Glutz device to an Eliona asset. For different Eliona projects different assets are used (see `proj_ids` in `Configuration`). The mapping is created automatically by the app and should be read only.
type Device struct {

	// References the configured endpoint (see `Configuration`)
	ConfigId int32 `json:"configId,omitempty"`

	// The project id for which the Eliona asset is created (see `project_ids` in `Configuration`)
	ProjectId string `json:"projectId,omitempty"`

	// References the asset id in Eliona which is automatically created by the app
	AssetId int32 `json:"assetId,omitempty"`

	// References the device id (i.e serial number)
	DeviceId string `json:"deviceId,omitempty"`

	// References the location
	LocationId string `json:"location_id,omitempty"`
}

// AssertDeviceRequired checks if the required fields are not zero-ed
func AssertDeviceRequired(obj Device) error {
	return nil
}

// AssertRecurseDeviceRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Device (e.g. [][]Device), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseDeviceRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aDevice, ok := obj.(Device)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertDeviceRequired(aDevice)
	})
}
