{
  "openapi" : "3.0.3",
  "info" : {
    "description" : "API to access and configure the Glutz",
    "title" : "Glutz App API",
    "version" : "1.0.0"
  },
  "externalDocs" : {
    "description" : "Find out more about the Glutz app",
    "url" : "https://github.com/eliona-smart-building-assistant/glutz-app"
  },
  "servers" : [ {
    "url" : "http://glutz/v1"
  } ],
  "tags" : [ {
    "description" : "Configuration for all Glutz endpoints",
    "externalDocs" : {
      "url" : "https://github.com/eliona-smart-building-assistant/glutzapp"
    },
    "name" : "Configuration"
  }, {
    "description" : "API version",
    "name" : "Version"
  } ],
  "paths" : {
    "/configs" : {
      "get" : {
        "description" : "Gets information about all configurations.",
        "operationId" : "getConfigurations",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/Configuration"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "Successfully returned all endpoint configurations"
          }
        },
        "summary" : "Get all endpoint configurations",
        "tags" : [ "Configuration" ]
      },
      "post" : {
        "description" : "Creates an example configuration.",
        "operationId" : "postConfiguration",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Configuration"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Configuration"
                }
              }
            },
            "description" : "Successfully created a new endpoint configuration"
          }
        },
        "summary" : "Creates an example configuration",
        "tags" : [ "Configuration" ]
      }
    },
    "/configs/{config-id}" : {
      "delete" : {
        "description" : "Removes information about the endpoint with the given id",
        "operationId" : "deleteConfigurationById",
        "parameters" : [ {
          "description" : "The id of the configured endpoint",
          "example" : 4711,
          "explode" : false,
          "in" : "path",
          "name" : "config-id",
          "required" : true,
          "schema" : {
            "example" : 4711,
            "format" : "int64",
            "type" : "integer"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "204" : {
            "description" : "Successfully deletes endpoint"
          }
        },
        "summary" : "Deletes an endpoint",
        "tags" : [ "Configuration" ]
      },
      "get" : {
        "description" : "Gets information about the endpoint with the given id",
        "operationId" : "getConfigurationById",
        "parameters" : [ {
          "description" : "The id of the configured endpoint",
          "example" : 4711,
          "explode" : false,
          "in" : "path",
          "name" : "config-id",
          "required" : true,
          "schema" : {
            "example" : 4711,
            "format" : "int64",
            "type" : "integer"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Configuration"
                }
              }
            },
            "description" : "Successfully returned configured endpoint"
          }
        },
        "summary" : "Get endpoint",
        "tags" : [ "Configuration" ]
      },
      "put" : {
        "description" : "Updates an endpoint.",
        "operationId" : "putConfigurationById",
        "parameters" : [ {
          "description" : "The id of the configured endpoint",
          "example" : 4711,
          "explode" : false,
          "in" : "path",
          "name" : "config-id",
          "required" : true,
          "schema" : {
            "example" : 4711,
            "format" : "int64",
            "type" : "integer"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Configuration"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Configuration"
                }
              }
            },
            "description" : "Successfully updates an endpoint"
          }
        },
        "summary" : "Updates an endpoint",
        "tags" : [ "Configuration" ]
      }
    },
    "/devices" : {
      "get" : {
        "description" : "Delivers a list of all assets mapped to devices",
        "operationId" : "getDevices",
        "parameters" : [ {
          "description" : "Id of `Configuration` for which the Glutz devices are mapped",
          "explode" : true,
          "in" : "query",
          "name" : "configId",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/Device"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "Successfully returned asset-device mappings"
          }
        },
        "summary" : "List all devices mapped to eliona assets",
        "tags" : [ "Devices" ]
      }
    },
    "/dashboard-template-names" : {
      "get" : {
        "description" : "Delivers all names for which the app provides dashboard templates.",
        "operationId" : "getDashboardTemplateNames",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "description" : "Names of available dashboard templates",
                  "items" : {
                    "description" : "Name of the dashboard template",
                    "type" : "string"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "Successfully returned list of template names"
          }
        },
        "summary" : "List available dashboard templates",
        "tags" : [ "Customization" ]
      }
    },
    "/dashboard-templates/{dashboard-template-name}" : {
      "get" : {
        "description" : "Delivers a dashboard template which can assigned to users in Eliona",
        "externalDocs" : {
          "description" : "The API to assign the dashboard to users in Eliona (see post /dashboards endpoint).",
          "url" : "https://github.com/eliona-smart-building-assistant/eliona-api"
        },
        "operationId" : "getDashboardTemplateByName",
        "parameters" : [ {
          "description" : "Name of the dashboard template",
          "explode" : false,
          "in" : "path",
          "name" : "dashboard-template-name",
          "required" : true,
          "schema" : {
            "example" : "Thingdust",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "Define the project the dashboard should be",
          "explode" : true,
          "in" : "query",
          "name" : "projectId",
          "required" : true,
          "schema" : {
            "example" : "99",
            "type" : "string"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Dashboard"
                }
              }
            },
            "description" : "Successfully returned dashboard template"
          },
          "404" : {
            "description" : "Template with name not found"
          }
        },
        "summary" : "Get a full dashboard template",
        "tags" : [ "Customization" ]
      }
    },
    "/version" : {
      "get" : {
        "description" : "Gets information about the APIs version.",
        "operationId" : "getVersion",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            },
            "description" : "Successfully returned the APIs version."
          }
        },
        "summary" : "Version of the API",
        "tags" : [ "Version" ]
      }
    },
    "/version/openapi.json" : {
      "get" : {
        "description" : "Gets specification for this API version as an openapi.json file.",
        "operationId" : "getOpenAPI",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            },
            "description" : "Successfully returned the openapi.json file."
          }
        },
        "summary" : "OpenAPI specification for this API version",
        "tags" : [ "Version" ]
      }
    }
  },
  "components" : {
    "parameters" : {
      "config-id" : {
        "description" : "The id of the configured endpoint",
        "example" : 4711,
        "explode" : false,
        "in" : "path",
        "name" : "config-id",
        "required" : true,
        "schema" : {
          "example" : 4711,
          "format" : "int64",
          "type" : "integer"
        },
        "style" : "simple"
      }
    },
    "schemas" : {
      "Configuration" : {
        "description" : "Each configuration defines access to a Glutz endpoint.",
        "properties" : {
          "configId" : {
            "description" : "Internal identifier for the configured endpoint (created automatically). This identifier always has to be used if you remove or update existing configured endpoints.",
            "format" : "int64",
            "nullable" : false,
            "readOnly" : true,
            "type" : "integer"
          },
          "username" : {
            "description" : "Username for login",
            "nullable" : false,
            "readOnly" : true,
            "type" : "string"
          },
          "password" : {
            "description" : "Password for login",
            "nullable" : false,
            "readOnly" : true,
            "type" : "string"
          },
          "apiToken" : {
            "description" : "Token for API.",
            "nullable" : false,
            "readOnly" : true,
            "type" : "string"
          },
          "url" : {
            "description" : "url for glutz endpoint",
            "nullable" : false,
            "readOnly" : true,
            "type" : "string"
          },
          "active" : {
            "description" : "Set to `true` by the app when running and to `false` when app is stopped",
            "nullable" : false,
            "readOnly" : true,
            "type" : "boolean"
          },
          "enable" : {
            "default" : true,
            "description" : "Flag to enable or disable the endpoint",
            "nullable" : true,
            "type" : "boolean"
          },
          "requestTimeout" : {
            "default" : 120,
            "description" : "Timeout in seconds for server",
            "type" : "integer"
          },
          "refreshInterval" : {
            "default" : 60,
            "description" : "Interval in seconds for collecting data from endpoint",
            "type" : "integer"
          },
          "projIds" : {
            "description" : "List of Eliona project ids for which this endpoint should collect data. For each project id all glutz devices are automatically created as an asset in Eliona. The mapping between Eliona is stored as an asset mapping in the glutz app and can be read with the ´DeviceMapping´ endpoint.",
            "example" : [ 42, 99 ],
            "items" : {
              "type" : "string"
            },
            "nullable" : true,
            "type" : "array"
          }
        },
        "type" : "object"
      },
      "Device" : {
        "description" : "The schema `Device` maps each pair of Eliona project id and Glutz device to an Eliona asset. For different Eliona projects different assets are used (see `proj_ids` in `Configuration`). The mapping is created automatically by the app and should be read only.",
        "properties" : {
          "configId" : {
            "description" : "References the configured endpoint (see `Configuration`)",
            "example" : 4711,
            "type" : "integer"
          },
          "projectId" : {
            "description" : "The project id for which the Eliona asset is created (see `project_ids` in `Configuration`)",
            "example" : "99",
            "type" : "string"
          },
          "assetId" : {
            "description" : "References the asset id in Eliona which is automatically created by the app",
            "example" : 815,
            "type" : "integer"
          },
          "deviceId" : {
            "description" : "References the device id (i.e serial number)",
            "example" : "572.913.180",
            "type" : "string"
          },
          "location_id" : {
            "description" : "References the location",
            "type" : "string",
            "example" : null
          }
        },
        "readOnly" : true,
        "type" : "object"
      },
      "Dashboard" : {
        "description" : "A frontend dashboard",
        "example" : {
          "sequence" : 1,
          "name" : "Weather info",
          "id" : 4711,
          "widgets" : [ {
            "sequence" : 1,
            "data" : [ {
              "elementSequence" : 1,
              "data" : {
                "subtype" : "input",
                "attribute" : "temperature",
                "key" : "humidity"
              },
              "assetId" : 4711,
              "id" : 4711
            }, {
              "elementSequence" : 1,
              "data" : {
                "subtype" : "input",
                "attribute" : "temperature",
                "key" : "humidity"
              },
              "assetId" : 4711,
              "id" : 4711
            } ],
            "assetId" : 4711,
            "details" : { },
            "id" : 4711,
            "widgetTypeName" : "Weather"
          }, {
            "sequence" : 1,
            "data" : [ {
              "elementSequence" : 1,
              "data" : {
                "subtype" : "input",
                "attribute" : "temperature",
                "key" : "humidity"
              },
              "assetId" : 4711,
              "id" : 4711
            }, {
              "elementSequence" : 1,
              "data" : {
                "subtype" : "input",
                "attribute" : "temperature",
                "key" : "humidity"
              },
              "assetId" : 4711,
              "id" : 4711
            } ],
            "assetId" : 4711,
            "details" : { },
            "id" : 4711,
            "widgetTypeName" : "Weather"
          } ],
          "projectId" : "99",
          "userId" : "42"
        },
        "properties" : {
          "id" : {
            "description" : "The internal Id of dashboard",
            "example" : 4711,
            "nullable" : true,
            "readOnly" : true,
            "type" : "integer"
          },
          "name" : {
            "description" : "The name for this dashboard",
            "example" : "Weather info",
            "type" : "string"
          },
          "projectId" : {
            "description" : "ID of the project to which the dashboard belongs",
            "example" : "99",
            "type" : "string"
          },
          "userId" : {
            "description" : "ID of the user who owns the dashboard",
            "example" : "42",
            "type" : "string"
          },
          "sequence" : {
            "default" : 0,
            "description" : "The sequence of the dashboard",
            "example" : 1,
            "nullable" : true,
            "type" : "integer"
          },
          "widgets" : {
            "description" : "List of widgets on this dashboard (order matches the order of widgets on the dashboard)",
            "items" : {
              "$ref" : "#/components/schemas/Widget"
            },
            "nullable" : true,
            "type" : "array"
          }
        },
        "required" : [ "name", "projectId", "userId" ],
        "type" : "object"
      },
      "Widget" : {
        "description" : "A widget on a frontend dashboard",
        "example" : {
          "sequence" : 1,
          "data" : [ {
            "elementSequence" : 1,
            "data" : {
              "subtype" : "input",
              "attribute" : "temperature",
              "key" : "humidity"
            },
            "assetId" : 4711,
            "id" : 4711
          }, {
            "elementSequence" : 1,
            "data" : {
              "subtype" : "input",
              "attribute" : "temperature",
              "key" : "humidity"
            },
            "assetId" : 4711,
            "id" : 4711
          } ],
          "assetId" : 4711,
          "details" : { },
          "id" : 4711,
          "widgetTypeName" : "Weather"
        },
        "properties" : {
          "id" : {
            "description" : "The internal Id of widget",
            "example" : 4711,
            "nullable" : true,
            "readOnly" : true,
            "type" : "integer"
          },
          "widgetTypeName" : {
            "description" : "The name for the type of this widget",
            "example" : "Weather",
            "type" : "string"
          },
          "details" : {
            "description" : "Detailed configuration depending on the widget type",
            "example" : { },
            "nullable" : true,
            "type" : "object"
          },
          "assetId" : {
            "description" : "The master asset id of this widget",
            "example" : 4711,
            "nullable" : true,
            "type" : "integer"
          },
          "sequence" : {
            "description" : "Placement order on dashboard; if not set the index in array is taken",
            "example" : 1,
            "nullable" : true,
            "type" : "integer"
          },
          "data" : {
            "description" : "List of data for the elements of widget",
            "items" : {
              "$ref" : "#/components/schemas/WidgetData"
            },
            "nullable" : true,
            "type" : "array"
          }
        },
        "required" : [ "widgetTypeName", "width" ],
        "type" : "object"
      },
      "WidgetData" : {
        "description" : "Data for a widget",
        "example" : {
          "elementSequence" : 1,
          "data" : {
            "subtype" : "input",
            "attribute" : "temperature",
            "key" : "humidity"
          },
          "assetId" : 4711,
          "id" : 4711
        },
        "properties" : {
          "id" : {
            "description" : "The internal Id of widget data",
            "example" : 4711,
            "nullable" : true,
            "readOnly" : true,
            "type" : "integer"
          },
          "elementSequence" : {
            "description" : "Position of the element in widget type",
            "example" : 1,
            "nullable" : true,
            "type" : "integer"
          },
          "assetId" : {
            "description" : "The master asset id of this widget",
            "example" : 4711,
            "nullable" : true,
            "type" : "integer"
          },
          "data" : {
            "description" : "individual config parameters depending on category",
            "example" : {
              "subtype" : "input",
              "attribute" : "temperature",
              "key" : "humidity"
            },
            "nullable" : true,
            "type" : "object"
          }
        },
        "type" : "object"
      }
    }
  }
}