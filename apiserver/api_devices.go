/*
 * Glutz App API
 *
 * API to access and configure the Glutz
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package apiserver

import (
	"net/http"
	"strings"
)

// DevicesApiController binds http requests to an api service and writes the service results to the http response
type DevicesApiController struct {
	service      DevicesApiServicer
	errorHandler ErrorHandler
}

// DevicesApiOption for how the controller is set up.
type DevicesApiOption func(*DevicesApiController)

// WithDevicesApiErrorHandler inject ErrorHandler into controller
func WithDevicesApiErrorHandler(h ErrorHandler) DevicesApiOption {
	return func(c *DevicesApiController) {
		c.errorHandler = h
	}
}

// NewDevicesApiController creates a default api controller
func NewDevicesApiController(s DevicesApiServicer, opts ...DevicesApiOption) Router {
	controller := &DevicesApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DevicesApiController
func (c *DevicesApiController) Routes() Routes {
	return Routes{
		{
			"GetDevices",
			strings.ToUpper("Get"),
			"/v1/devices",
			c.GetDevices,
		},
	}
}

// GetDevices - List all devices mapped to eliona assets
func (c *DevicesApiController) GetDevices(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	configIdParam, err := parseInt64Parameter(query.Get("configId"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GetDevices(r.Context(), configIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
