// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbglutz

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Device is an object representing the database table.
type Device struct {
	ConfigID   int64  `boil:"config_id" json:"config_id" toml:"config_id" yaml:"config_id"`
	ProjectID  string `boil:"project_id" json:"project_id" toml:"project_id" yaml:"project_id"`
	DeviceID   string `boil:"device_id" json:"device_id" toml:"device_id" yaml:"device_id"`
	AssetID    int32  `boil:"asset_id" json:"asset_id" toml:"asset_id" yaml:"asset_id"`
	LocationID string `boil:"location_id" json:"location_id" toml:"location_id" yaml:"location_id"`

	R *deviceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L deviceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DeviceColumns = struct {
	ConfigID   string
	ProjectID  string
	DeviceID   string
	AssetID    string
	LocationID string
}{
	ConfigID:   "config_id",
	ProjectID:  "project_id",
	DeviceID:   "device_id",
	AssetID:    "asset_id",
	LocationID: "location_id",
}

var DeviceTableColumns = struct {
	ConfigID   string
	ProjectID  string
	DeviceID   string
	AssetID    string
	LocationID string
}{
	ConfigID:   "devices.config_id",
	ProjectID:  "devices.project_id",
	DeviceID:   "devices.device_id",
	AssetID:    "devices.asset_id",
	LocationID: "devices.location_id",
}

// Generated where

type whereHelperint32 struct{ field string }

func (w whereHelperint32) EQ(x int32) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint32) NEQ(x int32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint32) LT(x int32) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint32) LTE(x int32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint32) GT(x int32) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint32) GTE(x int32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint32) IN(slice []int32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint32) NIN(slice []int32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var DeviceWhere = struct {
	ConfigID   whereHelperint64
	ProjectID  whereHelperstring
	DeviceID   whereHelperstring
	AssetID    whereHelperint32
	LocationID whereHelperstring
}{
	ConfigID:   whereHelperint64{field: "\"glutz\".\"devices\".\"config_id\""},
	ProjectID:  whereHelperstring{field: "\"glutz\".\"devices\".\"project_id\""},
	DeviceID:   whereHelperstring{field: "\"glutz\".\"devices\".\"device_id\""},
	AssetID:    whereHelperint32{field: "\"glutz\".\"devices\".\"asset_id\""},
	LocationID: whereHelperstring{field: "\"glutz\".\"devices\".\"location_id\""},
}

// DeviceRels is where relationship names are stored.
var DeviceRels = struct {
}{}

// deviceR is where relationships are stored.
type deviceR struct {
}

// NewStruct creates a new relationship struct
func (*deviceR) NewStruct() *deviceR {
	return &deviceR{}
}

// deviceL is where Load methods for each relationship are stored.
type deviceL struct{}

var (
	deviceAllColumns            = []string{"config_id", "project_id", "device_id", "asset_id", "location_id"}
	deviceColumnsWithoutDefault = []string{"config_id", "project_id", "device_id", "asset_id", "location_id"}
	deviceColumnsWithDefault    = []string{}
	devicePrimaryKeyColumns     = []string{"config_id", "project_id", "device_id"}
	deviceGeneratedColumns      = []string{}
)

type (
	// DeviceSlice is an alias for a slice of pointers to Device.
	// This should almost always be used instead of []Device.
	DeviceSlice []*Device
	// DeviceHook is the signature for custom Device hook methods
	DeviceHook func(context.Context, boil.ContextExecutor, *Device) error

	deviceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	deviceType                 = reflect.TypeOf(&Device{})
	deviceMapping              = queries.MakeStructMapping(deviceType)
	devicePrimaryKeyMapping, _ = queries.BindMapping(deviceType, deviceMapping, devicePrimaryKeyColumns)
	deviceInsertCacheMut       sync.RWMutex
	deviceInsertCache          = make(map[string]insertCache)
	deviceUpdateCacheMut       sync.RWMutex
	deviceUpdateCache          = make(map[string]updateCache)
	deviceUpsertCacheMut       sync.RWMutex
	deviceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var deviceAfterSelectHooks []DeviceHook

var deviceBeforeInsertHooks []DeviceHook
var deviceAfterInsertHooks []DeviceHook

var deviceBeforeUpdateHooks []DeviceHook
var deviceAfterUpdateHooks []DeviceHook

var deviceBeforeDeleteHooks []DeviceHook
var deviceAfterDeleteHooks []DeviceHook

var deviceBeforeUpsertHooks []DeviceHook
var deviceAfterUpsertHooks []DeviceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Device) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Device) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Device) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Device) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Device) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Device) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Device) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Device) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Device) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDeviceHook registers your hook function for all future operations.
func AddDeviceHook(hookPoint boil.HookPoint, deviceHook DeviceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		deviceAfterSelectHooks = append(deviceAfterSelectHooks, deviceHook)
	case boil.BeforeInsertHook:
		deviceBeforeInsertHooks = append(deviceBeforeInsertHooks, deviceHook)
	case boil.AfterInsertHook:
		deviceAfterInsertHooks = append(deviceAfterInsertHooks, deviceHook)
	case boil.BeforeUpdateHook:
		deviceBeforeUpdateHooks = append(deviceBeforeUpdateHooks, deviceHook)
	case boil.AfterUpdateHook:
		deviceAfterUpdateHooks = append(deviceAfterUpdateHooks, deviceHook)
	case boil.BeforeDeleteHook:
		deviceBeforeDeleteHooks = append(deviceBeforeDeleteHooks, deviceHook)
	case boil.AfterDeleteHook:
		deviceAfterDeleteHooks = append(deviceAfterDeleteHooks, deviceHook)
	case boil.BeforeUpsertHook:
		deviceBeforeUpsertHooks = append(deviceBeforeUpsertHooks, deviceHook)
	case boil.AfterUpsertHook:
		deviceAfterUpsertHooks = append(deviceAfterUpsertHooks, deviceHook)
	}
}

// OneG returns a single device record from the query using the global executor.
func (q deviceQuery) OneG(ctx context.Context) (*Device, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single device record from the query.
func (q deviceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Device, error) {
	o := &Device{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbglutz: failed to execute a one query for devices")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Device records from the query using the global executor.
func (q deviceQuery) AllG(ctx context.Context) (DeviceSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Device records from the query.
func (q deviceQuery) All(ctx context.Context, exec boil.ContextExecutor) (DeviceSlice, error) {
	var o []*Device

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbglutz: failed to assign all query results to Device slice")
	}

	if len(deviceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Device records in the query using the global executor
func (q deviceQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Device records in the query.
func (q deviceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbglutz: failed to count devices rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q deviceQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q deviceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbglutz: failed to check if devices exists")
	}

	return count > 0, nil
}

// Devices retrieves all the records using an executor.
func Devices(mods ...qm.QueryMod) deviceQuery {
	mods = append(mods, qm.From("\"glutz\".\"devices\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"glutz\".\"devices\".*"})
	}

	return deviceQuery{q}
}

// FindDeviceG retrieves a single record by ID.
func FindDeviceG(ctx context.Context, configID int64, projectID string, deviceID string, selectCols ...string) (*Device, error) {
	return FindDevice(ctx, boil.GetContextDB(), configID, projectID, deviceID, selectCols...)
}

// FindDevice retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDevice(ctx context.Context, exec boil.ContextExecutor, configID int64, projectID string, deviceID string, selectCols ...string) (*Device, error) {
	deviceObj := &Device{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"glutz\".\"devices\" where \"config_id\"=$1 AND \"project_id\"=$2 AND \"device_id\"=$3", sel,
	)

	q := queries.Raw(query, configID, projectID, deviceID)

	err := q.Bind(ctx, exec, deviceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbglutz: unable to select from devices")
	}

	if err = deviceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return deviceObj, err
	}

	return deviceObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Device) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Device) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbglutz: no devices provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(deviceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	deviceInsertCacheMut.RLock()
	cache, cached := deviceInsertCache[key]
	deviceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			deviceAllColumns,
			deviceColumnsWithDefault,
			deviceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(deviceType, deviceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(deviceType, deviceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"glutz\".\"devices\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"glutz\".\"devices\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbglutz: unable to insert into devices")
	}

	if !cached {
		deviceInsertCacheMut.Lock()
		deviceInsertCache[key] = cache
		deviceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Device record using the global executor.
// See Update for more documentation.
func (o *Device) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Device.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Device) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	deviceUpdateCacheMut.RLock()
	cache, cached := deviceUpdateCache[key]
	deviceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			deviceAllColumns,
			devicePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbglutz: unable to update devices, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"glutz\".\"devices\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, devicePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(deviceType, deviceMapping, append(wl, devicePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbglutz: unable to update devices row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbglutz: failed to get rows affected by update for devices")
	}

	if !cached {
		deviceUpdateCacheMut.Lock()
		deviceUpdateCache[key] = cache
		deviceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q deviceQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q deviceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbglutz: unable to update all for devices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbglutz: unable to retrieve rows affected for devices")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o DeviceSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DeviceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbglutz: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), devicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"glutz\".\"devices\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, devicePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbglutz: unable to update all in device slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbglutz: unable to retrieve rows affected all in update all device")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Device) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Device) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbglutz: no devices provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(deviceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	deviceUpsertCacheMut.RLock()
	cache, cached := deviceUpsertCache[key]
	deviceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			deviceAllColumns,
			deviceColumnsWithDefault,
			deviceColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			deviceAllColumns,
			devicePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbglutz: unable to upsert devices, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(devicePrimaryKeyColumns))
			copy(conflict, devicePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"glutz\".\"devices\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(deviceType, deviceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(deviceType, deviceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbglutz: unable to upsert devices")
	}

	if !cached {
		deviceUpsertCacheMut.Lock()
		deviceUpsertCache[key] = cache
		deviceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Device record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Device) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Device record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Device) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbglutz: no Device provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), devicePrimaryKeyMapping)
	sql := "DELETE FROM \"glutz\".\"devices\" WHERE \"config_id\"=$1 AND \"project_id\"=$2 AND \"device_id\"=$3"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbglutz: unable to delete from devices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbglutz: failed to get rows affected by delete for devices")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q deviceQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q deviceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbglutz: no deviceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbglutz: unable to delete all from devices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbglutz: failed to get rows affected by deleteall for devices")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o DeviceSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DeviceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(deviceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), devicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"glutz\".\"devices\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, devicePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbglutz: unable to delete all from device slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbglutz: failed to get rows affected by deleteall for devices")
	}

	if len(deviceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Device) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("dbglutz: no Device provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Device) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDevice(ctx, exec, o.ConfigID, o.ProjectID, o.DeviceID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeviceSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("dbglutz: empty DeviceSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeviceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DeviceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), devicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"glutz\".\"devices\".* FROM \"glutz\".\"devices\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, devicePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbglutz: unable to reload all in DeviceSlice")
	}

	*o = slice

	return nil
}

// DeviceExistsG checks if the Device row exists.
func DeviceExistsG(ctx context.Context, configID int64, projectID string, deviceID string) (bool, error) {
	return DeviceExists(ctx, boil.GetContextDB(), configID, projectID, deviceID)
}

// DeviceExists checks if the Device row exists.
func DeviceExists(ctx context.Context, exec boil.ContextExecutor, configID int64, projectID string, deviceID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"glutz\".\"devices\" where \"config_id\"=$1 AND \"project_id\"=$2 AND \"device_id\"=$3 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, configID, projectID, deviceID)
	}
	row := exec.QueryRowContext(ctx, sql, configID, projectID, deviceID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbglutz: unable to check if devices exists")
	}

	return exists, nil
}

// Exists checks if the Device row exists.
func (o *Device) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DeviceExists(ctx, exec, o.ConfigID, o.ProjectID, o.DeviceID)
}
